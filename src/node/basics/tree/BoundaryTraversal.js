'use strict';
// Generated By lexicon-dsa CLI tool.
// Author: Saptak Sengupta(deeps.sengupta@gmail.com)
// Github: https://github.com/saptaksengupta/

/**
 * Psudo Code --- 
 * Basic steps would be,
 * If it's anti clockwise, then 
 * Left boundary traversal excluding leaf nodes  
 * Leaf node traversal (In-order preferred)
 * Right boundary traversal excluding leaf nodes in reverse oreder
 * 
 */



function Tree(value) {
    this.value = value;
    this.left = null;
    this.right = null;
}

function isLeaf(node) {
    return node.left == null && node.right == null;
}

function addLeafs(root, res) {
    if (!root) {
        return null;
    }   

    if (isLeaf(root)) {
        res.push(root.value);
        return;
    }

    if (root.left) {
        addLeafs(root.left, res);
    }

    if (root.right) {
        addLeafs(root.right, res);
    }
}

function traversLeftBoundary(root, res) {
    let q = [];
    q.push(root);

    while (q.length > 0) {
        const len = q.length;
        for (let i = 0; i < len; i++) {

            const it = q.shift();
            if (!isLeaf(it)) {
                res.push(it.value);
            }

            if (it.left) {
                q.push(it.left);
            } else if(it.right) {
                q.push(it.right);
            }
        }
    }
    return res;
}

function traversRightBoundary(root, res) {
    var stack = [];
    while(root != null) {
        if (!isLeaf(root)){
            stack.push(root.value);
        }

        if (root.right) {
            root = root.right;
        } else {
            root = root.left;
        }
    }
    for (let i = stack.length - 1; i >= 0; i--) {
        res.push(stack[i]);
    }
}

function doBoundaryTraversal(root) {
    var res = [];
    res.push(root.value);
    traversLeftBoundary(root.left, res);
    addLeafs(root, res);
    traversRightBoundary(root.right, res);
    return res;
}



function main() {
    var tree = new Tree(1);
    tree.left = new Tree(2);
    tree.left.left = new Tree(3);
    tree.left.left.right = new Tree(4);
    tree.left.left.right.left = new Tree(5);
    tree.left.left.right.right = new Tree(6);


    tree.right = new Tree(7);
    tree.right.right = new Tree(8);
    tree.right.right.left = new Tree(9);
    tree.right.right.left.left = new Tree(10);
    tree.right.right.left.right = new Tree(11);
    
    console.log(doBoundaryTraversal(tree));
}

main();

