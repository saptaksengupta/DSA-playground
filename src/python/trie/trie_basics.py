# Generated By lexicon-dsa CLI tool.
# Author: Saptak Sengupta(deeps.sengupta@gmail.com)
# Github: https://github.com/saptaksengupta/

class TrieNode: 
    def __init__(self):
        self.children = [None]*26
        self.isEndOfWord = False


class Trie:
    def __init__(self):
        self.root = self.getNode()
    
    def charToIndex(self, char):
        return ord(char) - ord('a')

    def getNode(self):
        return TrieNode()

    def insertChar(self, word):

        crawlPointer = self.root
        for ch in range(len(word)):
            index = self.charToIndex(word[ch])

            if not crawlPointer.children[index]:
                crawlPointer.children[index] = self.getNode()
            
            crawlPointer = crawlPointer.children[index]

        crawlPointer.isEndOfWord = True

    def searchChar(self, word):
        crawlPointer = self.root
        for ch in range(len(word)):
            index = self.charToIndex(word[ch])

            if not crawlPointer.children[index]:
                return False
            crawlPointer = crawlPointer.children[index]
        
        return crawlPointer is not None and crawlPointer.isEndOfWord



# driver function 
def main(): 
  
    # Input keys (use only 'a' through 'z' and lower case) 
    keys = ["the","a","there","anaswe","any", 
            "by","their"] 
    output = ["Not present in trie", 
              "Present in trie"] 
  
    # Trie object 
    t = Trie() 
  
    # Construct trie 
    for key in keys: 
        t.insertChar(key) 
  
    # Search for different keys 
    print("{} ---- {}".format("the",output[t.searchChar("the")])) 
    print("{} ---- {}".format("these",output[t.searchChar("these")])) 
    print("{} ---- {}".format("their",output[t.searchChar("their")])) 
    print("{} ---- {}".format("thaw",output[t.searchChar("thaw")])) 
    print("{} ---- {}".format("someother",output[t.searchChar("someother")])) 

if __name__ == "__main__":
    main()