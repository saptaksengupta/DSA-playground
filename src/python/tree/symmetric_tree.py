# Generated By lexicon-dsa CLI tool.
# Author: Saptak Sengupta(deeps.sengupta@gmail.com)
# Github: https://github.com/saptaksengupta/

# Key idea is to check with itself to get the result

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def isSymmetric(self, root) -> bool:
        return self.isMirror(root, root)

    def isMirror(self, root1: TreeNode, root2: TreeNode):

        if root1 is None and root2 is None:
            return False
        
        if root1 is not None and root2 is not None:
            if root1.val == root2.val:
                return self.isMirror(root1.left, root2.right) and self.isMirror(root1.right, root2.left)

        return False


if __name__ == "__main__":
    root = TreeNode(1) 
    root.left = TreeNode(2) 
    root.right = TreeNode(2) 
    root.left.left = TreeNode(3) 
    root.left.right = TreeNode(4) 
    root.right.left = TreeNode(4) 
    root.right.right = TreeNode(3) 

    instance = Solution()
    instance.isSymmetric(root)


