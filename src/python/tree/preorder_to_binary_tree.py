# Generated By lexicon-dsa CLI tool.
# Author: Saptak Sengupta(deeps.sengupta@gmail.com)
# Github: https://github.com/saptaksengupta/

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    


class Solution:

    def preorderTraversal(self, root): 
        if root:
            print(root.val)
            self.preorderTraversal(root.left)
            self.preorderTraversal(root.right)
    
    def buildTree(self, list, start, end):
        
        if start > end:
            return

        root = TreeNode(list[start])

        mid = start + (end - start) // 2

        root.left = self.buildTree(list, start + 1, mid)
        root.right = self.buildTree(list, mid + 1, end)

        return root



if __name__ == "__main__":

    preorderArray = ['A', 'B', 'D', 'E', 'C', 'F', 'G']

    instance = Solution()
    root = instance.buildTree(preorderArray, 0, len(preorderArray) - 1)

    instance.preorderTraversal(root)
